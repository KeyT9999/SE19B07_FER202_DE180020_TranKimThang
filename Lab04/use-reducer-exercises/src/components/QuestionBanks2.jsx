
// Import React, useReducer, useState ƒë·ªÉ qu·∫£n l√Ω state ph·ª©c t·∫°p
import React, { useReducer, useState } from 'react';
// Import c√°c component UI t·ª´ react-bootstrap
import { Button, Container, Card } from 'react-bootstrap';
// Import icon ph·∫£n h·ªìi ƒë√∫ng/sai
import { FaCheckCircle, FaTimesCircle } from 'react-icons/fa';

// 1. Kh·ªüi t·∫°o tr·∫°ng th√°i ban ƒë·∫ßu cho quiz
const initialState = {
  questions: [ // Danh s√°ch c√¢u h·ªèi tr·∫Øc nghi·ªám
    {
      id: 1,
      question: 'What is the capital of Australia?',
      options: ['Sydney', 'Canberra', 'Melbourne', 'Perth'],
      answer: 'Canberra',
    },
    {
      id: 2,
      question: 'Which planet is known as the Red Planet?',
      options: ['Venus', 'Mars', 'Jupiter', 'Saturn'],
      answer: 'Mars',
    },
    {
      id: 3,
      question: 'What is the largest ocean on Earth?',
      options: ['Atlantic Ocean', 'Indian Ocean', 'Pacific Ocean', 'Arctic Ocean'],
      answer: 'Pacific Ocean',
    },
  ],
  currentQuestion: 0, // S·ªë th·ª© t·ª± c√¢u h·ªèi hi·ªán t·∫°i
  selectedOption: '', // ƒê√°p √°n ng∆∞·ªùi d√πng ch·ªçn
  score: 0,           // ƒêi·ªÉm s·ªë hi·ªán t·∫°i
  showScore: false,   // ƒê√£ ho√†n th√†nh quiz hay ch∆∞a
};

// 2. ƒê·ªãnh nghƒ©a reducer qu·∫£n l√Ω m·ªçi thay ƒë·ªïi tr·∫°ng th√°i quiz
function quizReducer(state, action) {
  switch (action.type) {
    case 'SELECT_OPTION':
      // Khi ng∆∞·ªùi d√πng ch·ªçn ƒë√°p √°n, c·∫≠p nh·∫≠t selectedOption
      return { ...state, selectedOption: action.payload };
    case 'NEXT_QUESTION': {
      // Khi b·∫•m Next/Finish: ki·ªÉm tra ƒë√°p √°n, tƒÉng ƒëi·ªÉm n·∫øu ƒë√∫ng, chuy·ªÉn sang c√¢u ti·∫øp theo
      const isCorrect = state.selectedOption === state.questions[state.currentQuestion].answer;
      return {
        ...state,
        score: isCorrect ? state.score + 1 : state.score, // tƒÉng ƒëi·ªÉm n·∫øu ƒë√∫ng
        currentQuestion: state.currentQuestion + 1, // sang c√¢u ti·∫øp theo
        selectedOption: '', // reset ƒë√°p √°n ƒë√£ ch·ªçn
        showScore: state.currentQuestion + 1 === state.questions.length, // true n·∫øu h·∫øt c√¢u h·ªèi
      };
    }
    case 'RESTART_QUIZ':
      // Khi b·∫•m Restart, reset v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
      return {
        ...initialState,
      };
    default:
      // N·∫øu action kh√¥ng h·ª£p l·ªá, gi·ªØ nguy√™n state
      return state;
  }
}

// 3. Component ch√≠nh qu·∫£n l√Ω quiz
function QuestionBanks2() {
  // S·ª≠ d·ª•ng useReducer ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i quiz
  const [state, dispatch] = useReducer(quizReducer, initialState);
  // Destructure c√°c bi·∫øn state cho d·ªÖ d√πng
  const { questions, currentQuestion, selectedOption, score, showScore } = state;

  // State feedback: null | true | false
  const [feedback, setFeedback] = useState(null);
  const [showFeedback, setShowFeedback] = useState(false);

  // Khi ng∆∞·ªùi d√πng ch·ªçn ƒë√°p √°n
  const handleOptionSelect = (option) => {
    dispatch({ type: 'SELECT_OPTION', payload: option });
    setShowFeedback(false);
  };

  // Khi b·∫•m Next/Finish
  const handleNextQuestion = () => {
    // Ki·ªÉm tra ƒë√∫ng/sai tr∆∞·ªõc khi chuy·ªÉn c√¢u
    const isCorrect = selectedOption === questions[currentQuestion].answer;
    setFeedback(isCorrect);
    setShowFeedback(true);
    // Sau 1s m·ªõi chuy·ªÉn c√¢u ƒë·ªÉ hi·ªÉn th·ªã feedback
    setTimeout(() => {
      setShowFeedback(false);
      setFeedback(null);
      dispatch({ type: 'NEXT_QUESTION' });
    }, 1000);
  };

  // Khi b·∫•m Restart Quiz
  const handleRestartQuiz = () => {
    dispatch({ type: 'RESTART_QUIZ' });
    setFeedback(null);
    setShowFeedback(false);
  };

  // Lu·ªìng ho·∫°t ƒë·ªông:
  // 1) Hi·ªÉn th·ªã c√¢u h·ªèi hi·ªán t·∫°i v√† c√°c ƒë√°p √°n
  // 2) Khi ch·ªçn ƒë√°p √°n, c·∫≠p nh·∫≠t selectedOption
  // 3) Khi b·∫•m Next/Finish, ki·ªÉm tra ƒë√∫ng/sai, hi·ªán feedback, sau ƒë√≥ chuy·ªÉn c√¢u ho·∫∑c hi·ªán ƒëi·ªÉm
  // 4) Khi h·∫øt quiz, hi·ªán ƒëi·ªÉm v√† n√∫t Restart
  return (
    <Container className="mt-4">
      <Card className="p-4">
        {showScore ? (
          <div className="text-center">
            {/* Hi·ªÉn th·ªã ƒëi·ªÉm s·ªë khi ho√†n th√†nh quiz */}
            <h2>
              Your Score: {score} / {questions.length}
            </h2>
            <Button variant="primary" onClick={handleRestartQuiz}>
              Restart Quiz
            </Button>
          </div>
        ) : (
          <div>
            {/* Hi·ªÉn th·ªã c√¢u h·ªèi hi·ªán t·∫°i */}
            <h4>
              Question {questions[currentQuestion].id}:<br />
              {questions[currentQuestion].question}
            </h4>
            {/* Hi·ªÉn th·ªã c√°c ƒë√°p √°n */}
            <div className="mt-3">
              {questions[currentQuestion].options.map((option, index) => (
                <Button
                  key={index}
                  variant={selectedOption === option ? "success" : "outline-secondary"}
                  className="m-2"
                  onClick={() => handleOptionSelect(option)}
                >
                  {option}
                </Button>
              ))}
            </div>
            {/* Feedback ƒë√∫ng/sai */}
            {showFeedback && (
              <div className="mt-3" style={{ fontSize: 20, fontWeight: 'bold', color: feedback ? 'green' : 'red', display: 'flex', alignItems: 'center', gap: 8 }}>
                {feedback ? <FaCheckCircle color="green" /> : <FaTimesCircle color="red" />}
                {feedback ? 'Correct! üéâ' : `Incorrect! The correct answer is: ${questions[currentQuestion].answer}`}
              </div>
            )}
            {/* N√∫t Next/Finish Quiz */}
            <Button
              variant="primary"
              className="mt-3"
              disabled={!selectedOption || showFeedback}
              onClick={handleNextQuestion}
            >
              {currentQuestion === questions.length - 1
                ? "Finish Quiz"
                : "Next Question"}
            </Button>
          </div>
        )}
      </Card>
    </Container>
  );
}

// Export component ƒë·ªÉ d√πng ·ªü file kh√°c
export default QuestionBanks2;
